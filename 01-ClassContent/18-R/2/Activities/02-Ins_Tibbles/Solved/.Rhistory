install.packages("splitstackshape")
require("tidyverse")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
install.packages("splitstackshape")
install.packages(c("splitstackshape", "tidyverse", "reshape2", "devtools", "plotly", "crosstalk", "DT", "fivethirtyeight"))
install.packages("splitstackshape")
install.packages("splitstackshape")
print(c)
a <- 3
b <- 5
c <- a+ b
print(c)
# Numeric
a <- 3
b <- 5
c <- a+ b
print(c)
# Character
d <- "I am a string"
e <- "No I am string"
# Boolean
f <- TRUE
g <-FALSE
h <- T
i <- F
for (a in ta_subjets){
print(a)
}
for (a in ta_subjects){
print(a)
}
ta_subjects <- c(class_TA_Names, subjects)
print(ta_subjects)
# for loop iterate
for (a in ta_subjects){
print(a)
}
class_TA_Names <- c("Mario", "Ruchi", "Aiyana")
subjects <- c("VBA","Python","R")
Numeric_vect <- c
subjects[2]
ta_subjects <- c(class_TA_Names, subjects)
print(ta_subjects)
for (a in ta_subjects){
print(a)
}
# A few other operations
Numeric_vect <- C(1,2,3,4,5,6,8)
num stuvector <- 1:length(ta_subjects)
squared_vect <- Numeric_vect**2
ta_subjects <- c(class_TA_Names, subjects)
print(ta_subjects)
Numeric_vect <- C(1,2,3,4,5,6,8)
num_stuvector <- 1:length(ta_subjects)
squared_vect <- Numeric_vect**2
Numeric_vect <- C(1,2,3,4,5,6,8)
num_stuvector <- 1:length(ta_subjects)
squared_vect <- Numeric_vect**2
print(num_stuvector)
print(squared_vect)
num_stuvector
Numeric_vect <- c(1,2,3,4,5,6,8)
num_stuvector <- 1:length(ta_subjects)
squared_vect <- Numeric_vect**2
print(num_stuvector)
print(squared_vect)
random_list <- list("movies" = c("Mile 22","Happy Feet","The Nun","Scarecrows"),
"states" = c("New jersey","New york",Nebraska),
"Coins" = c("penny","Dinar","Dirham","lira","dime")
"First_times" = c("Washington","Armstrong","delaware"),
"nums" = c(1,2,3,4,8,16),
"bools" = c(T,T,T,F)
)
# here list acts like function
random_list <- list("movies" = c("Mile 22","Happy Feet","The Nun","Scarecrows"),
"states" = c("New jersey","New york","Nebraska"),
"Coins" = c("penny","Dinar","Dirham","lira","dime")
"First_times" = c("Washington","Armstrong","delaware"),
"nums" = c(1,2,3,4,8,16),
"bools" = c(T,T,T,F)
)
random_list <- list("movies" = c("Mile 22","Happy Feet","The Nun","Scarecrows"),
"states" = c("New jersey","New york","Nebraska"),
"Coins" = c("penny","Dinar","Dirham","lira","dime")
"First_times" = c("Washington","Armstrong","delaware"),
"nums" = c(1,2,3,4,8,16),
"bools" = c(T,T,T,F)
)
random_list <- list("movies" = c("Mile 22","Happy Feet","The Nun","Scarecrows"),
"states" = c("New jersey","New york","Nebraska"),
"Coins" = c("penny","Dinar","Dirham","lira","dime"),
"First_times" = c("Washington","Armstrong","delaware"),
"nums" = c(1,2,3,4,8,16),
"bools" = c(T,T,T,F)
)
random_list$Coins
# or it can ve done as
random_list[3]
random_list[[3][1]]
random_list[3]
random_list[[3][1]]
random_list[3][1]
random_list[3],[1]
random_list$Coins[1]
typeof(random_list)
class_Student_Names <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
print(class_Student_Names)
Sys.Date()
sample(33,3)
sample(33,3)
sample(33,3)
for (a in class_Student_Names){
print(class_Student_Names)
}
for (a in class_Student_Names){
print(class_Student_Names,Sys.Date())
}
for (a in class_Student_Names){
print(class_Student_Names,)
}
Sys.Date()
for (s in class_Student_Names){
print(s)
}
class_Student_Names <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
print(class_Student_Names)
roll_call <- function(cl){
print(Sys.Date())
for (s in cl){
print(s)
}
}
for (s in class_Student_Names){
print(s)
}
for (s in class_Student_Names){
print(s,Sys.Date())
}
for (s in class_Student_Names){
Sys.Date(
print(s))
}
for (s in class_Student_Names){
Sys.Date()
print(s)
}
for (s in class_Student_Names){
print(Sys.Date())
print(s)
}
class_Student_Names <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
print(class_Student_Names)
for (s in class_Student_Names){
print(Sys.Date())
print(s)
}
lock_comb <- function(cl){
for(s in cl){
combo <- sample(33,3) # create a list of 3 numbers randomly
print(s)
print(combo)
}
}
sec_let <- substr(students,2,2) # name of string from what to what
if(sec_let == 'e') {
print(student)
combo <- sample(33:66,3)# random between 33 to 66 and 3 number to generate
}
lock_comb <- function(cl){
for(s in cl){
combo <- sample(33,3) # create a list of 3 numbers randomly
print(s)
print(combo)
}
}
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
names(precipitation) <- months
print(precipitation)
print(names(precipitation))
# Access a single member of precipitation by its name
mars_precipitation <- precipitation["Mar"]
print(mars_precipitation)
names(precipitation) <- months
names(precipitation) <- months
names(precipitation) <- months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
names(precipitation) <- months
print(precipitation)
# Display names of precipitation
print(names(precipitation))
mars_precipitation <- precipitation["Mar"]
print(mars_precipitation)
summary(precipitation)
precipitation_summary <- summary(precipitation)
precipitation_summary["Min."]
precipitation_summary["Mean"]
precipitation %>% summary()
precipitation_summary[["Max."]]
sd(precipitation)
precipitation %>% sd()
3.141592653 %>% round(2)
precipitation %>% sd()
3.141592653 %>% round(2)
length(precipitation)
yearly_precipitation <- sum(precipitation)
yearly_precipitation
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
install.packages("magrittr")
library(magrittr)
installed.packages("magrittr")
precipitation %>% length()
installed.package{utils}
yearly_precipitation <- sum(precipitation)
yearly_precipitation
print(precipitation)
yearly_precipitation <- sum(precipitation)
yearly_precipitation
print(yearly_precipitation)
print(yearly_precipitation%>%sum())
library(tidyverse)
ufo <- read_csv("Resources/ufo.csv")
ufo
knitr::opts_chunk$set(echo = TRUE)
ufo <- read_csv("ufo.csv")
get wd
get pwd
setwd("C:/Users/ravin/OneDrive/Desktop/RUTSOM201805DATA1-Class-Repository-DATA/01-ClassContent/18-R/2/Activities/01-Stu_UFO/Unsolved")
library(tidyverse)
ufo <- read_csv("ufo.csv")
View(ufo)
ufo %>% head()
ufo$state %>% unique()
#Average durations of the sightings
ufo -applied to
group_by(state)
summerise(number.
# Mean duration by state, summerise
ufo %>% group_by(state) %>% summerise(vg =mean()) %>%
arrange(desc(number.sightings))
ufo %>% group_by(state) %>% summerise(vg =mean()) %>%
arrange(desc(number.sightings))
ufo %>% group_by(state) %>% summarise(vg =mean()) %>%
arrange(desc(number.sightings))
ufo %>% group_by(state) %>% summarise(vg.sightings =mean()) %>%
arrange(desc(number.sightings))
ufo %>% group_by(state) %>% summarise(vg.sightings =mean('duration(seconds)')) %>%
arrange(desc(vg.sightings))
library(tidyverse)
# tibbles are created from a number of ways eg By supplyin vectors to col names
city.centers.tb <-
tibble(
City = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = population/area
)
########tibbles are tabkes or dataframes###########################
library(tidyverse)
# tibbles are created from a number of ways eg By supplyin vectors to col names
city.centers.tb <-
tibble(
City = c("New york", "Chicago", "Los Angles", "Boston")
Population = C(2000,3000,4000,6000)
area = c(345,234,234,12)
pop.des = population/area
)
library(tidyverse)
# tibbles are created from a number of ways eg By supplyin vectors to col names
city.centers.tb <-
tibble(
City = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = population/area
)
city.centers.tb <-
tibble(
City = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = population/area
)
library(tidyverse)
# tibbles are created from a number of ways eg By supplyin vectors to col names
city.centers.tb <-
tibble(
City = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = Population/area
)
city.centers.tb <-
tibble(
city = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = Population/area
)
city.centers.tb <-
tibble(
city = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = Population/area
)
########tibbles are tabkes or dataframes###########################
library(tidyverse)
# tibbles are created from a number of ways eg By supplyin vectors to col names
city.centers.tb <-
tibble(
city = c("New york", "Chicago", "Los Angles", "Boston"),
Population = C(2000,3000,4000,6000),
area = c(345,234,234,12),
pop.des = Population/area
)
city.centers.tb <-
tibble(
city = c("New york", "Chicago", "Los Angles", "Boston"),
Population = c(200,3000,4000,6000),
area = c(345,234,234,12),
pop.des = Population/area
)
city.centers.tb
city.centers.tb
data.set.tb <- read.csv("dataset.csv")
data.set.tb
data.set.tb <- read.csv("dataset.csv")
setwd("C:/Users/ravin/OneDrive/Desktop/RUTSOM201805DATA1-Class-Repository-DATA/01-ClassContent/18-R/2/Activities/02-Ins_Tibbles/Solved")
data.set.tb <- read.csv("dataset.csv")
names(data.set.tb)
name.pers.tb <-
tibble(
Name = c("George","Martha","John","Abigail"),
age = c(12,11,10,7)
yrsforLegal = 25 - age
name.pers.tb <-
tibble(
Name = c("George","Martha","John","Abigail"),
age = c(12,11,10,7),
yrsforLegal = 25 - age
name.pers.tb
#################################
name.pers.tb <-
tibble(
Name = c("George","Martha","John","Abigail"),
age = c(12,11,10,7),
yrsforLegal = 25-age
)
name.pers.tb
name.pers.tb <-
tibble(
Name = c("George","Martha","John","Abigail"),
current_age = c(12,11,10,7),
#yrsforLegal = 25-current_age
#
yrsforLegal = (25 - current_age)
)
name.pers.tb
